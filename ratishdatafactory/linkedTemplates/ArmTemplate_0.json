{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "ratishdatafactory"
		},
		"LS_adlsg2_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'LS_adlsg2'"
		},
		"LS_adlsg2_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://myratishadlsg2.dfs.core.windows.net"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/LS_adlsg2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('LS_adlsg2_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('LS_adlsg2_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Sink_adlsg2DVD')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_adlsg2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "transformed",
						"fileSystem": "dvdrentals"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_adlsg2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Source_adlsg2DVD')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_adlsg2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"fileName": {
						"type": "string",
						"defaultValue": "film.csv"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": "movies",
						"fileSystem": "dvdrentals"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "film_id",
						"type": "String"
					},
					{
						"name": "title",
						"type": "String"
					},
					{
						"name": "description",
						"type": "String"
					},
					{
						"name": "release_year",
						"type": "String"
					},
					{
						"name": "language_id",
						"type": "String"
					},
					{
						"name": "rental_duration",
						"type": "String"
					},
					{
						"name": "rental_rate",
						"type": "String"
					},
					{
						"name": "length",
						"type": "String"
					},
					{
						"name": "replacement_cost",
						"type": "String"
					},
					{
						"name": "rating",
						"type": "String"
					},
					{
						"name": "last_update",
						"type": "String"
					},
					{
						"name": "special_features",
						"type": "String"
					},
					{
						"name": "fulltext",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_adlsg2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sink_cust_orders')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_adlsg2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "joineddata",
						"fileSystem": "testdata"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_adlsg2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/source_ecommerce_cust')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_adlsg2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "customer_orders.csv",
						"folderPath": "Ecommerce",
						"fileSystem": "testdata"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "cid",
						"type": "String"
					},
					{
						"name": "cname",
						"type": "String"
					},
					{
						"name": "clocation",
						"type": "String"
					},
					{
						"name": "cprodid",
						"type": "String"
					},
					{
						"name": "orderdate;",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_adlsg2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/source_ecommerce_prod')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_adlsg2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "products.csv",
						"folderPath": "Ecommerce",
						"fileSystem": "testdata"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "pprodid",
						"type": "String"
					},
					{
						"name": "prodname",
						"type": "String"
					},
					{
						"name": "proddesc;",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_adlsg2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ecommerce')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "join, filter, select, conditional split",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "source_ecommerce_cust",
								"type": "DatasetReference"
							},
							"name": "customerOrders"
						},
						{
							"dataset": {
								"referenceName": "source_ecommerce_prod",
								"type": "DatasetReference"
							},
							"name": "productDetails"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "sink_cust_orders",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "sink_cust_orders",
								"type": "DatasetReference"
							},
							"name": "sink2"
						},
						{
							"dataset": {
								"referenceName": "sink_cust_orders",
								"type": "DatasetReference"
							},
							"name": "sink3"
						},
						{
							"dataset": {
								"referenceName": "sink_cust_orders",
								"type": "DatasetReference"
							},
							"name": "sink4"
						}
					],
					"transformations": [
						{
							"name": "Join1"
						},
						{
							"name": "FilteredValues"
						},
						{
							"name": "Select1"
						},
						{
							"name": "ConditionalSplit1"
						}
					],
					"script": "source(output(\n\t\tcid as string,\n\t\tcname as string,\n\t\tclocation as string,\n\t\tcprodid as string,\n\t\t{orderdate;} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> customerOrders\nsource(output(\n\t\tpprodid as string,\n\t\tprodname as string,\n\t\t{proddesc;} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> productDetails\ncustomerOrders, productDetails join(cprodid == pprodid,\n\tjoinType:'left',\n\tpartitionBy('hash', 1),\n\tbroadcast: 'auto')~> Join1\nSelect1 filter(isNull(prodname),\n\tpartitionBy('hash', 1)) ~> FilteredValues\nJoin1 select(mapColumn(\n\t\tcid,\n\t\tcname,\n\t\tclocation,\n\t\tcprodid,\n\t\t{orderdate;},\n\t\tprodname,\n\t\t{proddesc;}\n\t),\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nFilteredValues split(equals(clocation, 'bangalore'),\n\tequals(clocation, 'hydrabad'),\n\tequals(clocation, 'pune'),\n\tdisjoint: false,\n\tpartitionBy('hash', 1)) ~> ConditionalSplit1@(bangalore, hydrabad, pune, others)\nConditionalSplit1@hydrabad sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['hydrabad'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> sink1\nConditionalSplit1@pune sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['pune'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> sink2\nConditionalSplit1@others sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['other cities'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> sink3\nConditionalSplit1@bangalore sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['bangalore'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> sink4"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/source_ecommerce_cust')]",
				"[concat(variables('factoryId'), '/datasets/source_ecommerce_prod')]",
				"[concat(variables('factoryId'), '/datasets/sink_cust_orders')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/filmRating')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_adlsg2DVD",
								"type": "DatasetReference"
							},
							"name": "adlsg2"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Sink_adlsg2DVD",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumnRating"
						}
					],
					"script": "source(output(\n\t\tfilm_id as short,\n\t\ttitle as string,\n\t\tdescription as string,\n\t\trelease_year as short,\n\t\tlanguage_id as boolean,\n\t\trental_duration as short,\n\t\trental_rate as double,\n\t\tlength as short,\n\t\treplacement_cost as double,\n\t\trating as string,\n\t\tlast_update as string,\n\t\tspecial_features as string,\n\t\tfulltext as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> adlsg2\nadlsg2 derive(ratingElaboration = iif(rating == 'PG-13','Parental guidance under 13',\r\niif(rating == 'PG','Parental guidance',\r\niif(rating == 'R','Adult audience',\r\niif(rating == 'G','General audience',\r\niif(rating == 'NC-17','above age 17','')))))) ~> DerivedColumnRating\nDerivedColumnRating sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['transformedData'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_adlsg2DVD')]",
				"[concat(variables('factoryId'), '/datasets/Sink_adlsg2DVD')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ppl_Joins')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "join, select, filter, conditional split",
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "ecommerce",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"customerOrders": {},
									"productDetails": {},
									"sink1": {},
									"sink2": {},
									"sink3": {},
									"sink4": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-01-04T14:17:48Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/ecommerce')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ppl_filmRating')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "filmRating",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"adlsg2": {
										"fileName": "film.csv"
									},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2021-12-31T09:42:09Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/filmRating')]"
			]
		}
	]
}